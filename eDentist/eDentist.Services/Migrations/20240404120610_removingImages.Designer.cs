// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDentist.Services.Database;

#nullable disable

namespace eDentist.Services.Migrations
{
    [DbContext(typeof(EDentistDbContext))]
    [Migration("20240404120610_removingImages")]
    partial class removingImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eDentist.Services.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TerminZatvoren")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Vrijeme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentID = 1,
                            Datum = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(7648),
                            TerminZatvoren = false,
                            UserId = 2,
                            Vrijeme = "10:00 AM"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.BlogPost", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("BlogId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("eDentist.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId")
                        .HasName("PK__City__F2D21A960A01C0F5");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Sarajevo",
                            CountryId = 1,
                            ZipCode = "71000"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Banja Luka",
                            CountryId = 1,
                            ZipCode = "78000"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Tuzla",
                            CountryId = 1,
                            ZipCode = "75000"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Mostar",
                            CountryId = 1,
                            ZipCode = "88000"
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Zenica",
                            CountryId = 1,
                            ZipCode = "72000"
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Doboj",
                            CountryId = 1,
                            ZipCode = "74000"
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Bihac",
                            CountryId = 1,
                            ZipCode = "77000"
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Brcko",
                            CountryId = 1,
                            ZipCode = "76101"
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Trebinje",
                            CountryId = 1,
                            ZipCode = "89000"
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Visegrad",
                            CountryId = 1,
                            ZipCode = "73300"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId")
                        .HasName("PK__Country__10D160BFBDD7D3F9");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Bosnia and Herzegovina"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.DentalService", b =>
                {
                    b.Property<int>("DentalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DentalServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DentalServiceId"));

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ServicePrice")
                        .HasColumnType("int");

                    b.HasKey("DentalServiceId")
                        .HasName("PK__DentalSe__51B93F22BFED9684");

                    b.ToTable("DentalService", (string)null);

                    b.HasData(
                        new
                        {
                            DentalServiceId = 1,
                            ServiceDescription = "Profesionalno čišćenje za sjajan osmijeh.",
                            ServiceName = "Čišćenje zuba",
                            ServicePrice = 80
                        },
                        new
                        {
                            DentalServiceId = 2,
                            ServiceDescription = "Efikasno popunjavanje dentalnih karijesa.",
                            ServiceName = "Popunjavanje karijesa",
                            ServicePrice = 120
                        },
                        new
                        {
                            DentalServiceId = 3,
                            ServiceDescription = "Sigurno uklanjanje problematičnih zuba.",
                            ServiceName = "Vađenje zuba",
                            ServicePrice = 150
                        },
                        new
                        {
                            DentalServiceId = 4,
                            ServiceDescription = "Dijagnostički rendgen za procjenu dentalnog zdravlja.",
                            ServiceName = "Dentalni rendgen",
                            ServicePrice = 90
                        },
                        new
                        {
                            DentalServiceId = 5,
                            ServiceDescription = "Konsultacija za bravice i ortodontske tretmane.",
                            ServiceName = "Ortodontska konsultacija",
                            ServicePrice = 200
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteId")
                        .HasName("PK__Favorite__CE74FAF579E6D7C9");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            ProductId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.MedicalCard", b =>
                {
                    b.Property<int>("MedicalCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicalCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalCardId"));

                    b.Property<int?>("DentalServiceId")
                        .HasColumnType("int")
                        .HasColumnName("DentalServiceID");

                    b.Property<string>("DoctorsOppinion")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("datumDijagnoze")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicalCardId")
                        .HasName("PK__MedicalC__931EC236004DC9A6");

                    b.HasIndex("DentalServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalCard", (string)null);

                    b.HasData(
                        new
                        {
                            MedicalCardId = 1,
                            DentalServiceId = 1,
                            DoctorsOppinion = "Sample Doctors Opinion",
                            UserId = 2,
                            datumDijagnoze = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(7762)
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("OrderHeaderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderHeaderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF66B02537");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderHeaderId = 1,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 2,
                            OrderHeaderId = 1,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 3,
                            OrderHeaderId = 1,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 4,
                            OrderHeaderId = 2,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 5,
                            OrderHeaderId = 2,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 6,
                            OrderHeaderId = 2,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 7,
                            OrderHeaderId = 3,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 8,
                            OrderHeaderId = 3,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 9,
                            OrderHeaderId = 3,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 10,
                            OrderHeaderId = 4,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 11,
                            OrderHeaderId = 4,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 12,
                            OrderHeaderId = 4,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 13,
                            OrderHeaderId = 5,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 14,
                            OrderHeaderId = 5,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 15,
                            OrderHeaderId = 5,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 16,
                            OrderHeaderId = 6,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 17,
                            OrderHeaderId = 6,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 18,
                            OrderHeaderId = 6,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 19,
                            OrderHeaderId = 7,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 20,
                            OrderHeaderId = 7,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 21,
                            OrderHeaderId = 7,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 22,
                            OrderHeaderId = 8,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 23,
                            OrderHeaderId = 8,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 24,
                            OrderHeaderId = 8,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 25,
                            OrderHeaderId = 9,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 26,
                            OrderHeaderId = 9,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 27,
                            OrderHeaderId = 9,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 28,
                            OrderHeaderId = 10,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 29,
                            OrderHeaderId = 10,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 30,
                            OrderHeaderId = 10,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 31,
                            OrderHeaderId = 11,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 32,
                            OrderHeaderId = 11,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 33,
                            OrderHeaderId = 11,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 34,
                            OrderHeaderId = 12,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 35,
                            OrderHeaderId = 12,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 36,
                            OrderHeaderId = 12,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 37,
                            OrderHeaderId = 13,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 38,
                            OrderHeaderId = 13,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 39,
                            OrderHeaderId = 13,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 40,
                            OrderHeaderId = 14,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 41,
                            OrderHeaderId = 14,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 42,
                            OrderHeaderId = 14,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 43,
                            OrderHeaderId = 15,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 44,
                            OrderHeaderId = 15,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 45,
                            OrderHeaderId = 15,
                            ProductId = 3,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.OrderHeader", b =>
                {
                    b.Property<int>("OrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderHeaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderHeaderId"));

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderHeaderId")
                        .HasName("PK__OrderHea__4BEA0BF490A2A873");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHeader", (string)null);

                    b.HasData(
                        new
                        {
                            OrderHeaderId = 1,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(7913),
                            TotalPrice = 10,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 2,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(7996),
                            TotalPrice = 20,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 3,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8087),
                            TotalPrice = 30,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 4,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8145),
                            TotalPrice = 40,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 5,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8201),
                            TotalPrice = 50,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 6,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8297),
                            TotalPrice = 60,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 7,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8356),
                            TotalPrice = 70,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 8,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8411),
                            TotalPrice = 80,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 9,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8465),
                            TotalPrice = 90,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 10,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8523),
                            TotalPrice = 100,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 11,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8645),
                            TotalPrice = 110,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 12,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8706),
                            TotalPrice = 120,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 13,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(8766),
                            TotalPrice = 130,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 14,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(9068),
                            TotalPrice = 140,
                            UserId = 2
                        },
                        new
                        {
                            OrderHeaderId = 15,
                            OrderDate = new DateTime(2024, 4, 4, 14, 6, 9, 951, DateTimeKind.Local).AddTicks(9121),
                            TotalPrice = 150,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6ED012064AE");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Barcode = "123456789001",
                            ProductDescription = "Zahvaljujuci 3960 mekanih i tankih Curen vlakana nježna je za desni – i pruža ucinkovitost cišcenja. 3960 Curen vlakana promjera su 0,12 mm. Odaberite svoju najdražu boju.\r\n\r\nZubne cetkice Curaprox sprjecavaju oštecenja uzrokovana cetkanjem i vrlo ucinkovito i temeljito uklanjaju zubne naslage tj. plak. Curen® vlakna su cvršca od najlonskih vlakana te zadržavaju svoj oblik i cvrstocu cak i kada su vlažna. Upravo zahvaljujuci tim svojstvima moguce je proizvesti mekane cetkice s velikim brojem tankih vlakana.\r\n\r\nNe sadrži štetne tvari poput bisfenola A (BPA), ftalata ili azo-boja.",
                            ProductName = "CURAPROX CS 3960",
                            ProductPrice = 5,
                            ProductTypeId = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 2,
                            Barcode = "123456789002",
                            ProductDescription = "Listerine coolmint rastvor za ispiranje usne duplje pomaže u sprIJecavanju pojave plaka i gingivitisa.\r\n\r\nKlinicki je dokazano da svakodnevna upotreba tecnosti za ispiranje usta može da poboljša oralnu higijenu, a klinicka istraživanja su pokazala da ispiranje od 30 sekundi sa Listerine tecnošcu za ispiranje usta, u kombinaciji sa pranjem zuba cetkicom i upotrebom konca, pomaže u kontroli zubnog plaka – glavnog uzrocnika oboljenja desni.",
                            ProductName = "LISTERINE Coolmint",
                            ProductPrice = 10,
                            ProductTypeId = 4,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 3,
                            Barcode = "123456789003",
                            ProductDescription = "Colgate Total pasta za zube pruža dugotrajnu sveobuhvatnu zaštitu vaših zuba i desni. Smanjuje plak, jača zubnu gleđ i pruža svež dah.",
                            ProductName = "Colgate Total",
                            ProductPrice = 7,
                            ProductTypeId = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 4,
                            Barcode = "123456789004",
                            ProductDescription = "Električna četkica za zube Oral-B Pro 1000 pruža učinkovito čišćenje zuba i desni. Ima senzor pritiska koji vas upozorava ako previše pritiskate prilikom četkanja.",
                            ProductName = "Oral-B Pro 1000",
                            ProductPrice = 40,
                            ProductTypeId = 3,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 5,
                            Barcode = "123456789005",
                            ProductDescription = "Sensodyne Pronamel pasta za zube štiti od erozije zubne gleđi i pomaže u smanjenju osetljivosti zuba na toplo, hladno, slatko ili kiselo.",
                            ProductName = "Sensodyne Pronamel",
                            ProductPrice = 8,
                            ProductTypeId = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 6,
                            Barcode = "123456789006",
                            ProductDescription = "Crest 3D White pasta za beljenje zuba uklanja mrlje s površine zuba i pruža sjajno beli osmeh. Formulirana s aktivnim sastojcima za izbeljivanje.",
                            ProductName = "Crest 3D White",
                            ProductPrice = 12,
                            ProductTypeId = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 7,
                            Barcode = "123456789007",
                            ProductDescription = "Listerine Total Care rastvor za ispiranje usta pruža sveobuhvatnu zaštitu od gingivitisa, kamenca, lošeg daha i drugih problema s ustima.",
                            ProductName = "Listerine Total Care",
                            ProductPrice = 15,
                            ProductTypeId = 4,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 8,
                            Barcode = "123456789008",
                            ProductDescription = "Waterpik Aquarius je električni uređaj za oralno ispiranje koji pomaže u uklanjanju zubnog plaka i poboljšava zdravlje desni. Idealan za korišćenje kod kuće.",
                            ProductName = "Waterpik Aquarius",
                            ProductPrice = 50,
                            ProductTypeId = 3,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 9,
                            Barcode = "123456789009",
                            ProductDescription = "Arm & Hammer Advance White pasta za zube sadrži posebne sastojke koji pomažu u beljenju zuba i pružaju dugotrajan osećaj svežine.",
                            ProductName = "Arm & Hammer Advance White",
                            ProductPrice = 9,
                            ProductTypeId = 2,
                            StateMachine = "draft"
                        },
                        new
                        {
                            ProductId = 10,
                            Barcode = "123456789010",
                            ProductDescription = "Philips Sonicare DiamondClean je električna četkica za zube koja nudi naprednu tehnologiju čišćenja i pomaže u uklanjanju do 10 puta više plaka u poređenju s ručnim četkama.",
                            ProductName = "Philips Sonicare DiamondClean",
                            ProductPrice = 120,
                            ProductTypeId = 3,
                            StateMachine = "draft"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.ProductType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TypeId")
                        .HasName("PK__ProductT__516F0395CFF2B1F5");

                    b.ToTable("ProductType", (string)null);

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeName = "Četkice za zube"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeName = "Dentalni konac"
                        },
                        new
                        {
                            TypeId = 3,
                            TypeName = "Dentalne paste"
                        },
                        new
                        {
                            TypeId = 4,
                            TypeName = "Vodica za usta"
                        },
                        new
                        {
                            TypeId = 5,
                            TypeName = "Elektricne cetkice"
                        },
                        new
                        {
                            TypeId = 6,
                            TypeName = "Dentalni materijali"
                        },
                        new
                        {
                            TypeId = 7,
                            TypeName = "Oprema za čišćenje"
                        },
                        new
                        {
                            TypeId = 8,
                            TypeName = "Oprema za popravak"
                        },
                        new
                        {
                            TypeId = 9,
                            TypeName = "Oprema za rezanje i oblikovanje"
                        },
                        new
                        {
                            TypeId = 10,
                            TypeName = "Svjetiljke i instrumenti"
                        },
                        new
                        {
                            TypeId = 11,
                            TypeName = "Ostalo"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.RecommendResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DrugiProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("PrviProizvodId")
                        .HasColumnType("int");

                    b.Property<int?>("TreciProizvodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecommendResult");
                });

            modelBuilder.Entity("eDentist.Services.Database.Roles", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Zaposlenik"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Pacijent"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Transactions", b =>
                {
                    b.Property<int>("TranskcijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranskcijaId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranskcijaId");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TranskcijaId = 1,
                            Amount = 10.0,
                            OrderHeaderId = 1,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 2,
                            Amount = 20.0,
                            OrderHeaderId = 2,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 3,
                            Amount = 30.0,
                            OrderHeaderId = 3,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 4,
                            Amount = 40.0,
                            OrderHeaderId = 4,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 5,
                            Amount = 50.0,
                            OrderHeaderId = 5,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 6,
                            Amount = 60.0,
                            OrderHeaderId = 6,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 7,
                            Amount = 70.0,
                            OrderHeaderId = 7,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 8,
                            Amount = 80.0,
                            OrderHeaderId = 8,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 9,
                            Amount = 90.0,
                            OrderHeaderId = 9,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 10,
                            Amount = 100.0,
                            OrderHeaderId = 10,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 11,
                            Amount = 110.0,
                            OrderHeaderId = 11,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 12,
                            Amount = 120.0,
                            OrderHeaderId = 12,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 13,
                            Amount = 130.0,
                            OrderHeaderId = 13,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 14,
                            Amount = 140.0,
                            OrderHeaderId = 14,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        },
                        new
                        {
                            TranskcijaId = 15,
                            Amount = 150.0,
                            OrderHeaderId = 15,
                            TransId = "PAYID-MXPGHDI82U242769W004564J",
                            TransactionStatus = "Success"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC6A8E000D");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Adress = "Put za topli do bb",
                            CityId = 5,
                            Email = "elmacomor@gmail.com",
                            Name = "Elma",
                            PasswordHash = "Ec2E8HEyY+K7jgCZxIq6xN1mMC0=",
                            PasswordSalt = "hIKCvFbPgvV3+1ee/YT0ag==",
                            RoleID = 1,
                            Surname = "Comor",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Adress = "Sehovina bb",
                            CityId = 5,
                            Email = "korisnik@gmail.com",
                            Name = "Korisnik",
                            PasswordHash = "zKoUC9Xl5ULYE9GgvkhJ8OfrP7U=",
                            PasswordSalt = "AaqPcOkG3IxMF79mKa3H9w==",
                            RoleID = 2,
                            Surname = "Prezime",
                            Username = "korisnik"
                        });
                });

            modelBuilder.Entity("eDentist.Services.Database.Appointment", b =>
                {
                    b.HasOne("eDentist.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentist.Services.Database.City", b =>
                {
                    b.HasOne("eDentist.Services.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_country_city");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eDentist.Services.Database.Favorite", b =>
                {
                    b.HasOne("eDentist.Services.Database.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_favorites_products");

                    b.HasOne("eDentist.Services.Database.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_favorites_users");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentist.Services.Database.MedicalCard", b =>
                {
                    b.HasOne("eDentist.Services.Database.DentalService", "DentalService")
                        .WithMany("MedicalCards")
                        .HasForeignKey("DentalServiceId")
                        .HasConstraintName("fk_service_card");

                    b.HasOne("eDentist.Services.Database.User", "User")
                        .WithMany("MedicalCards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_medicalCard");

                    b.Navigation("DentalService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentist.Services.Database.Order", b =>
                {
                    b.HasOne("eDentist.Services.Database.OrderHeader", "OrderHeader")
                        .WithMany("OrderOrderHeaders")
                        .HasForeignKey("OrderHeaderId")
                        .HasConstraintName("fk_order_orderheader");

                    b.HasOne("eDentist.Services.Database.OrderHeader", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_order_product");

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eDentist.Services.Database.OrderHeader", b =>
                {
                    b.HasOne("eDentist.Services.Database.User", "User")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentist.Services.Database.Product", b =>
                {
                    b.HasOne("eDentist.Services.Database.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("fk_product_type");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("eDentist.Services.Database.Transactions", b =>
                {
                    b.HasOne("eDentist.Services.Database.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId");

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("eDentist.Services.Database.User", b =>
                {
                    b.HasOne("eDentist.Services.Database.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("pk_user_city");

                    b.HasOne("eDentist.Services.Database.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eDentist.Services.Database.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("eDentist.Services.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("eDentist.Services.Database.DentalService", b =>
                {
                    b.Navigation("MedicalCards");
                });

            modelBuilder.Entity("eDentist.Services.Database.OrderHeader", b =>
                {
                    b.Navigation("OrderOrderHeaders");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("eDentist.Services.Database.Product", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("eDentist.Services.Database.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eDentist.Services.Database.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("MedicalCards");

                    b.Navigation("OrderHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
